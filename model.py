# -*- coding: utf-8 -*-
"""carprice_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aDK4CemfYYkWlOJWa0RYviFS50B5LZ4w
"""

# Importing required libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Lasso, Ridge
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.model_selection import cross_val_score
import numpy as np

# Load the dataset
car_data = pd.read_csv('D:\FDS MINI PROJECT\MODEL\car_data.csv')

# Display the first few rows of the dataset
print(car_data.head())

# Check the information about the dataset
print(car_data.info())

# Check for missing values
print(car_data.isnull().sum())

# Describe the dataset
print(car_data.describe())

# Visualize categorical data columns
fig, axes = plt.subplots(1, 3, figsize=(15, 5), sharey=True)
fig.suptitle('Visualizing categorical columns')
sns.barplot(x='Fuel_Type', y='Selling_Price', data=car_data, ax=axes[0])
sns.barplot(x='Seller_Type', y='Selling_Price', data=car_data, ax=axes[1])
sns.barplot(x='Transmission', y='Selling_Price', data=car_data, ax=axes[2])

# Convert categorical variables to numerical
car_data.replace({'Fuel_Type': {'Petrol': 0, 'Diesel': 1, 'CNG': 2}}, inplace=True)
car_data = pd.get_dummies(car_data, columns=['Seller_Type', 'Transmission'], drop_first=True)

# Visualize correlation between columns
numeric_columns = car_data.select_dtypes(include=['float64', 'int64']).columns
correlation_data = car_data[numeric_columns]

# Visualize correlation between columns
plt.figure(figsize=(10, 7))
sns.heatmap(correlation_data.corr(), annot=True)
plt.title('Correlation between the columns')
plt.show()
# Plot correlation between present price and selling price
plt.figure(figsize=(7, 5))
sns.regplot(x='Present_Price', y='Selling_Price', data=car_data)
plt.title('Correlation between present price and selling price')
plt.show()

# Split the dataset into features and target variable
X = car_data.drop(['Car_Name', 'Selling_Price'], axis=1)
y = car_data['Selling_Price']

# Split the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Linear Regression
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)
pred_linear = linear_model.predict(X_test)

# Lasso Regression
lasso_model = Lasso(alpha=1.0)
lasso_model.fit(X_train, y_train)
pred_lasso = lasso_model.predict(X_test)

# Ridge Regression
ridge_model = Ridge(alpha=1.0)
ridge_model.fit(X_train, y_train)
pred_ridge = ridge_model.predict(X_test)

# Random Forest Regression
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
pred_rf = rf_model.predict(X_test)

# Gradient Boosting Regression
gb_model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
gb_model.fit(X_train, y_train)
pred_gb = gb_model.predict(X_test)

# Evaluate models
models = [linear_model, lasso_model, ridge_model, rf_model, gb_model]
model_names = ['Linear Regression', 'Lasso Regression', 'Ridge Regression', 'Random Forest Regression', 'Gradient Boosting Regression']

results_df = pd.DataFrame(index=model_names, columns=['MAE', 'MSE', 'R2 Score'])

for model, name in zip(models, model_names):
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    results_df.loc[name] = [mae, mse, r2]

print(results_df)

# Plotting results
plt.figure(figsize=(10, 5))
results_df[['MAE', 'MSE', 'R2 Score']].plot(kind='bar')
plt.title('Model Evaluation Metrics')
plt.xlabel('Model')
plt.ylabel('Error/Metric Value')
plt.xticks(rotation=45)
plt.legend(loc='upper right')
plt.show()

# Cross-validation
results_cv_df = pd.DataFrame(index=model_names, columns=['Cross-validated Score'])

for model, name in zip(models, model_names):
    cv_scores = cross_val_score(model, X, y, cv=5, scoring='r2')
    results_cv_df.loc[name] = [np.mean(cv_scores)]

print(results_cv_df)

# Plot cross-validated scores
plt.figure(figsize=(10, 5))
results_cv_df.plot(kind='bar', color='green')
plt.title('Cross-validated Scores')
plt.xlabel('Model')
plt.ylabel('R-squared')
plt.xticks(rotation=45)
plt.legend(loc='upper right')
plt.show()

import pickle

# Train your model (assuming you have already trained your models)

# For example, let's say you have trained a Linear Regression model named linear_model
# linear_model = LinearRegression()
# linear_model.fit(X_train, y_train)

# After training, you can save the model as a pickle file
with open('model.pkl', 'wb') as f:
    pickle.dump(linear_model, f)
